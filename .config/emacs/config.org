#+TITLE: GNU Emacs Config
#+AUTHOR: Felipe Amorim
#+DESCRIPTION: Personal Emacs config.
#+STARTUP: overview

* Table of Contents :toc:
- [[#package-management][Package Management]]
  - [[#use-package-configs][Use-package Configs]]
  - [[#custom-scripts][Custom Scripts]]
- [[#interface][Interface]]
  - [[#gui][GUI]]
  - [[#which-key][Which Key]]
  - [[#ivy-counsel][Ivy (Counsel)]]
  - [[#icons][Icons]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#fonts][Fonts]]
  - [[#diminish][Diminish]]
- [[#theming][Theming]]
- [[#evil-mode][Evil Mode]]
- [[#org-mode][Org Mode]]
  - [[#basic-installation][Basic Installation]]
  - [[#evil-org][Evil Org]]
  - [[#bullets][Bullets]]
  - [[#table-of-contents][Table of Contents]]
  - [[#agenda][Agenda]]
  - [[#attachments][Attachments]]
  - [[#org-tempo][Org Tempo]]
  - [[#balance-window-margins][Balance Window Margins]]
  - [[#line-spacing][Line Spacing]]
  - [[#org-roam][Org Roam]]
  - [[#images][Images]]
  - [[#org-behavior][Org Behavior]]
- [[#development][Development]]
  - [[#tab][Tab]]
  - [[#commenting][Commenting]]
  - [[#rainbow-mode][Rainbow Mode]]
- [[#file-opening][File opening]]
- [[#general-keybindings][General Keybindings]]
- [[#terminals][Terminals]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
- [[#directory-cleaning][Directory Cleaning]]
  - [[#changing-the-location-of-the-custom-file][Changing the location of the "custom file"]]
  - [[#backup-files][Backup Files]]
  - [[#auto-save-files][Auto Save Files]]
  - [[#lock-files][Lock Files]]
  - [[#files-created-by-packages][Files created by packages]]
- [[#others][Others]]

* Package Management
** Use-package Configs

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

(setq
  use-package-always-ensure t ;; Makes sure to download new packages if they aren't already downloaded
  use-package-verbose t) ;; Package install logging. Packages break, it's nice to know why.
#+end_src

** Custom Scripts
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.config/emacs/scripts"))
#+end_src

* Interface
** GUI

#+begin_src emacs-lisp
;; Hide Scroll bar,menu bar, tool bar
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

;; Line numbering but not to all modes
(dolist (mode '(
   text-mode-hook
   prog-mode-hook
   conf-mode-hook))
   (add-hook mode (lambda ()
     (display-line-numbers-mode 1)
     (setq display-line-numbers 'relative))
   )
)

(dolist (mode '(
   org-mode-hook
   term-mode-hook
   shell-mode-hook
   treemacs-mode-hook
   eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Open Emacs in fullscreen
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 1))
(blink-cursor-mode 0)
  
;; Underline line at descent position, not baseline position
(setq x-underline-at-descent-line t)
#+end_src

** Which Key

#+begin_src emacs-lisp
(use-package which-key
:diminish
:ensure t
:init
  (which-key-mode 1)
:config
(setq which-key-side-window-location 'bottom
   which-key-sort-order #'which-key-key-order-alpha
   which-key-sort-uppercase-first nil
   which-key-add-column-padding 1
   which-key-max-display-columns nil
   which-key-min-display-lines 8
   which-key-side-window-slot -10
   which-key-side-window-max-height 0.25
   which-key-idle-delay 0.8
   which-key-max-description-length 35
   which-key-allow-imprecise-window-fit nil
   which-key-separator " → " ))
#+end_src

** Ivy (Counsel)

- =Ivy=, a generic completion mechanism for Emacs.
- =Counsel=, a collection of Ivy-enhanced versions of common Emacs commands.
- =Ivy-rich= allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
 (use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
    :map ivy-minibuffer-map
    ("TAB" . ivy-alt-done)
    ("C-l" . ivy-alt-done)
    ("C-j" . ivy-next-line)
    ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
    ("C-k" . ivy-previous-line)
    ("C-l" . ivy-done)
    ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
    ("C-k" . ivy-previous-line)
    ("C-d" . ivy-reverse-i-search-kill))
  :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
    (ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)) 
  
;; smex makes counsel-m-x remember last used commands
(use-package smex
  :ensure t
)
#+end_src

** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Doom Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
)
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "InconsolataGo Nerd Font Mono" :height 120)
#+end_src
** Diminish
  
With this package , you can add ‘:diminish’ to any use-package block
to hide that particular mode in the modeline.
  
#+begin_src emacs-lisp
(use-package diminish) 
#+end_src 

* Theming

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-acario-dark t)
  ;;(load-theme 'doom-challenger-deep t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-acario-dark") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

  ;; you can check more doom themes here
  ;; https://github.com/doomemacs/themes/tree/screenshots

  ;; you can try themes with M-x -> load themes
#+end_src

* Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (define-key evil-normal-state-map (kbd "W") 'save-buffer)
  (define-key evil-normal-state-map (kbd "E") 'kill-this-buffer)
  (define-key evil-normal-state-map (kbd ",,") 'ibuffer)
  (define-key evil-normal-state-map (kbd ",f") 'find-file)
  (define-key evil-normal-state-map (kbd ",r") 'recentf-open-files)
  (define-key evil-normal-state-map (kbd ",n") 'org-roam-node-find)
  (define-key evil-normal-state-map (kbd ",3") 'treemacs)
  (define-key evil-normal-state-map (kbd "F12") 'next-buffer)
  (define-key evil-normal-state-map (kbd "F11") 'previous-buffer)
  (define-key evil-normal-state-map (kbd ",c") 'cfw:open-org-calendar)
  (define-key evil-normal-state-map (kbd ",l") 'org-roam-buffer-toggle)
  (define-key evil-normal-state-map (kbd ",v") 'eval-last-sexp)
#+end_src

* Org Mode
** Basic Installation

#+begin_src emacs-lisp
  (use-package org
    :ensure t)
#+end_src

** Evil Org

#+begin_src emacs-lisp
  ;; fix https://github.com/Somelauw/evil-org-mode/issues/93
  (fset 'evil-redirect-digit-argument 'ignore) ;; before evil-org loaded

  (evil-define-key 'motion 'evil-org-mode
      (kbd "0") 'evil-org-beginning-of-line)
  ;; end of the fix

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

** Bullets

#+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'org-indent-mode)
   (use-package org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Table of Contents

#+begin_src emacs-lisp
   (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src

** Agenda

#+begin_src emacs-lisp
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-reschedule "note")
(setq org-log-into-drawer t)
(setq org-agenda-files '("/home/sasaki/.config/emacs/agenda/"))
(setq org-agenda-span 10
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-3d")

(setq org-agenda-block-separator 8411)
(global-set-key (kbd "C-c a") 'org-agenda)

(setq org-agenda-custom-commands
  '(("z" "Agenda"
     ((agenda ""
       ((org-agenda-span 10)
         (org-agenda-start-on-weekday nil)
         (org-agenda-start-day "-3d")
       ))
      (todo "TODO"
        ((org-agenda-overriding-header "Unscheduled tasks")
         (org-agenda-files '("/home/sasaki/.config/emacs/agenda/"))
         (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
         )
      )
      )
    )
  )
)
#+end_src

** Attachments
#+begin_src emacs-lisp
(setq org-attach-directory "~/.config/emacs/attachments")

;; hit C-c C-l to create a link to the attached file
(setq org-attach-store-link-p 'attached)

;; attachment tag
(setq org-attach-auto-tag "ATTACHMENT")
#+end_src

** Org Tempo
  
Org Tempo is a builting package that help us to handle different kinds
of source blocks. With org-tempo we can type =<s= and generate a
source block easily.
  
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
  
#+begin_src emacs-lisp
(require 'org-tempo) 
#+end_src

** Balance Window Margins

Center org mode content in the middle of the screen and other UI improvements for writing.

#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 140
    visual-fill-column-center-text t)
  (visual-fill-column-mode 1)
)

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill)
) 

(use-package olivetti
  :ensure t
)

(add-hook 'org-mode-hook 'olivetti-mode)
#+end_src

** Line Spacing
  
#+begin_src emacs-lisp  
(defun org-mode-line-spacing ()
  "Set some line spacing between lines for org mode files"
  (setq-default line-spacing 1))

(add-hook 'org-mode-hook 'org-mode-line-spacing)
#+end_src 

** Org Roam
*** Requirements
org-roam requires the following packages on your host operating system:

- =gcc=
- =sqlite3=

*** Basic configuration

You can sync org-roam database with the command =org-roam-db-autosync-mode=.

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/.config/emacs/roam-notes"))

  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)

  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src
  
*** Journaling:

#+begin_src emacs-lisp
(setq org-roam-dailies-directory "journal/")
  
;; Adding the time to each entry

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%H:%M>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
#+end_src
  
*** Keep backlinks buffer open

You can read more about this [[https://github.com/org-roam/org-roam/issues/507][here]].

#+begin_src emacs-lisp
(defun tim/org-roam-buffer-show (_)
  (if (and
        ;; Don't do anything if we're in the minibuffer or in the calendar
        (not (minibufferp))
        (not (derived-mode-p 'calendar-mode))
        ;; Show org-roam buffer iff the current buffer has a org-roam file
        (xor (org-roam-file-p) (eq 'visible (org-roam-buffer--visibility)))
      )

      (org-roam-buffer-toggle)
  )
)

(add-hook 'window-buffer-change-functions 'tim/org-roam-buffer-show)
#+end_src 

*** Org-roam backlinks

Setting the buffer styling:

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
  '("\\*org-roam\\*"
     (display-buffer-in-direction)
     (direction . right)
     (window-width . 0.15)
     (window-height . fit-window-to-buffer)
   )
)
#+end_src

*** Fast note insertion
The code bellow insert a org-roam node link in the current document without open a new buffer.
  
#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
    (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)
   )
) 
#+end_src 

** Images
  
About the =inline-image feature=: If you use this setting and don’t want
to see images in a specific file, add this at the top of the org files
that are not to display images: =+STARTUP: noinlineimages=

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src
  
Setting up =org-download.

#+begin_src emacs-lisp  
(use-package org-download
  :ensure t
)
  
(setq-default org-download-image-dir "~/.config/emacs/images")

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src 
  
Setting image thumb scale.
  
#+begin_src emacs-lisp  
(setq org-image-actual-width 300)
(setq org-download-image-org-width 300)
#+end_src 

** Org Behavior
Replace default ellipsis with an icon.
  
#+begin_src emacs-lisp
(setq org-ellipsis "↴")
#+end_src

Follow org mode links by pressing the ENTER key and be able to go back with BACKSPACE.

#+begin_src emacs-lisp
; follow org mode links pressing the ENTER key
(with-eval-after-load 'evil-maps
(define-key evil-motion-state-map (kbd "RET") nil))

; Go back after follow a link
(setq org-return-follows-link t)
(define-key global-map [(control backspace)] 'org-mark-ring-goto)
#+end_src

Autosave org buffers when something change (manually or automatically).

#+begin_src emacs-lisp
  (setq auto-save-default t
        auto-revert-use-notify nil
        auto-revert-verbose nil)

  (global-auto-revert-mode 1)

  (defmacro func-ignore (fnc)
    "Return function that ignores its arguments and invokes FNC."
    `(lambda (&rest _rest)
      (funcall ,fnc)))

  (advice-add 'org-deadline       :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-schedule       :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-store-log-note :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-todo           :after (func-ignore #'org-save-all-org-buffers))

#+end_src
  
Disable org mode auto indent.

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

Hide emphasis markers

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

* Development
** Tab
Configuring tab to be equals to two epaces

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq indent-line-function 'insert-tab)
#+end_src

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Mode

Display the actual color as a background for any hex color value
(ex. #ffffff).  The code block below enables rainbow-mode in all
programming modes (prog-mode) as well as org-mode.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* File opening
#+begin_src emacs-lisp
(use-package openwith)
(setq openwith-associations
  (list
  (list (openwith-make-extension-regexp
          '("mpg" "mpeg" "mp3" "mp4" "m4v"
            "avi" "wmv" "wav" "mov" "flv"
            "ogm" "ogg" "mkv" "webm"))
        "mpv"
        '(file))
  (list (openwith-make-extension-regexp
          '("xbm" "pbm" "pgm" "ppm" "pnm"
            "gif" "bmp" "tif"))
        "sxiv -a"
        '(file))
  (list (openwith-make-extension-regexp
          '("pdf"))
        "okular"
        '(file))))

(openwith-mode 1)

;; suppress large file prompt
(setq large-file-warning-threshold nil)
#+end_src

* General Keybindings

#+begin_src emacs-lisp
;; (load "~/.config/emacs/scripts/buffer-move")
(require 'buffer-move) 

(defun open-config-file ()
  "Open a specific file."
  (interactive)
  (find-file "~/.config/emacs/config.org")
)

(defun open-tasks-file ()
  "Open a specific file."
  (interactive)
  (find-file "~/.config/emacs/agenda/tasks.org")
)

(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file)
)
  
(defun org-agenda-custom-view ()
  (interactive)
  (org-agenda nil "z")
)
#+end_src

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer felipe/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (felipe/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
  )
  (felipe/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b b" '(ibuffer :wk "Swich to buffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
  )
  (felipe/leader-keys
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e r" '(eval-region :wk "Evaluate elisp in region")
  ) 
  (felipe/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(counsel-describe-function :wk "Describe function")
    "h v" '(counsel-describe-variable :wk "Describe variable")
  )
  (felipe/leader-keys
    "f" '(:ignore t :wk "Find")
    "f f" '(counsel-find-file :wk "Find file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f s" '(sudo-edit-find-file :wk "Find file with sudo")
    "f n" '(org-roam-node-find :wk "Find Org Roam node")
  )
  (felipe/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  (felipe/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t v" '(vterm-toggle :wk "Toggle vterm"))
  (felipe/leader-keys
    "o" '(:ignore t :wk "Org")
    "o i" '(org-toggle-item :wk "Org toggle item")
    "o g" '(org-babel-tangle :wk "Org babel tangle")
    "o s" '(org-schedule :wk "Org schedule")
  )
  (felipe/leader-keys
    "n" '(:ignore t :wk "Org Roam")
    "n f" '(org-roam-node-find :wk "Find node")
    "n i" '(org-roam-node-insert-immediate :wk "Insert node")
    "n j" '(org-roam-dailies-capture-today :wk "Create a journal for today")
    "n t" '(org-roam-dailies-goto-today :wk "Go to today's journal")
  )
  (felipe/leader-keys
    "c" '(:ignore t :wk "Config")
    "c f" '(open-config-file :wk "Open Emacs config file")
    "c r" '(reload-init-file :wk "Reload emacs config")
  )
  (felipe/leader-keys
    "t" '(:ignore t :wk "Org Attachments")
    "t i" '(org-attach-attach-cp :wk "Insert an attachment")
    "t l" '(org-insert-link :wk "Add link to attachment")
  )
  (felipe/leader-keys
    "a" '(:ignore t :wk "Org Agenda")
    "a o" '(org-agenda-custom-view :wk "Open agenda")
    "a t" '(open-tasks-file :wk "Open tasks list")
  )
)
#+end_src

* Terminals
** vterm

#+begin_src emacs-lisp
(use-package vterm
  :config
    (setq vterm-max-scrollback 5000
      shell-file-name "/usr/bin/zsh"
    )
)
#+end_src 

** vterm-toggle
  
#+begin_src emacs-lisp  
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src 

* Directory Cleaning

** Changing the location of the "custom file"

To avoid having Emacs place variables into your hand-crafted =init.el= file, you can use this snippet: 
  
#+begin_example emacs-lisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)
#+end_example 

** Backup Files

Saving backup files in a dedicated directory

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

** Auto Save Files

Saving auto save files, like =#Emacs.org#= in a dedicated diretory

#+begin_example emacs-lisp
;; auto-save-mode doesn't create the path automatically. thus, we are creating here
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_example

** Lock Files

These are the files that look like =.#Emacs.org=. They appear when you have unsaved changes to a file in a buffer. Unfortunately these can’t be moved, but they can be disabled:

#+begin_example emacs-lisp
(setq create-lockfiles nil)
#+end_example

** Files created by packages

Projectile, lsp-mode, and other packages create their own files to store variables and state. The fix bellow tries to handle that but it might not work in all situations.

#+begin_example emacs-lisp
(setq projectile-known-projects-file (expand-file-name "tmp/projectile-bookmarks.eld" user-emacs-directory)
      lsp-session-file (expand-file-name "tmp/.lsp-session-v1" user-emacs-directory))
#+end_example

* Others

#+begin_src emacs-lisp
(setq 
  org-default-notes-file "/home/sasaki/.config/emacs/agenda/tasks.org"
  initial-buffer-choice  org-default-notes-file)
  
;; remember when you were in a file
(save-place-mode 1)
  
;; dont pop up UI dialogs when prompting
(setq use-dialog-box nil)
  
;; automatically update buffers when the file change
(global-auto-revert-mode 1)

;; automatically update dired when the filesystem change
(setq global-auto-revert-non-file-buffers t)
  
;; sudo editing
(use-package sudo-edit)
#+end_src
  
